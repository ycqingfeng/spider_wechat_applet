"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Charts = (function () {
    function Charts(context) {
        this.context = context;
    }
    Charts.prototype.initCircleBarView = function () {
        var _this = this;
        var yArr = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70];
        var x = 100;
        [1, 20, 40, 60].forEach(function (num) {
            yArr.forEach(function (value) {
                _this.fillCircle({ x: x + num, y: value }, { radius: 2, color: '#0BD2BC' });
                _this.fillCircle({ x: (x + 5) + num, y: value }, { radius: 2, color: '#0BD2BC' });
            });
        });
    };
    Charts.prototype.fillRect = function (pos, opt) {
        var _fillStyle = this.context.fillStyle;
        this.context.setFillStyle(opt.color, 5);
        this.context.fillRect(pos.x, pos.y, opt.height, opt.width);
        this.context.draw(true);
        this.context.setFillStyle(_fillStyle);
    };
    Charts.prototype.fillCircle = function (pos, opt) {
        var _fillStyle = this.context.fillStyle;
        this.context.setFillStyle(opt.color);
        this.context.arc(pos.x, pos.y, opt.radius, 2 * Math.PI);
        this.context.fill();
        this.context.setFillStyle(this._shadeColor1(opt.color, 20));
        this.context.arc(pos.x, pos.y, opt.radius - 2, 2 * Math.PI);
        this.context.fill();
        this.context.draw(true);
        this.context.setFillStyle(_fillStyle);
    };
    Charts.prototype._shadeColor1 = function (color, percent) {
        var num = parseInt(color.slice(1), 16), amt = Math.round(2.55 * percent), R = (num >> 16) + amt, G = (num >> 8 & 0x00FF) + amt, B = (num & 0x0000FF) + amt;
        return "#" + (0x1000000 + (R < 255 ? R < 1 ? 0 : R : 255) * 0x10000 + (G < 255 ? G < 1 ? 0 : G : 255) * 0x100 + (B < 255 ? B < 1 ? 0 : B : 255)).toString(16).slice(1);
    };
    return Charts;
}());
exports.Charts = Charts;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhcnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjaGFydC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBO0lBR0UsZ0JBQVksT0FBeUI7UUFDbkMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7SUFDekIsQ0FBQztJQUVELGtDQUFpQixHQUFqQjtRQUFBLGlCQVdDO1FBVkMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsR0FBRyxHQUFHLENBQUM7UUFFWixDQUFDLENBQUMsRUFBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7WUFDeEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEtBQUs7Z0JBQ2hCLEtBQUksQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO2dCQUMzRSxLQUFJLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDO1lBQ25GLENBQUMsQ0FBQyxDQUFBO1FBQ0osQ0FBQyxDQUFDLENBQUE7SUFFSixDQUFDO0lBR0QseUJBQVEsR0FBUixVQUFTLEdBQVcsRUFBRSxHQUFXO1FBQy9CLElBQUksVUFB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LENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN6SyxDQUFDO0lBQ0gsYUFBQztBQUFELENBQUMsQUFwREQsSUFvREM7QUFwRFksd0JBQU0iLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQ2hhcnRzIHtcclxuICBjb250ZXh0OiB3eC5DYW52YXNDb250ZXh0O1xyXG5cclxuICBjb25zdHJ1Y3Rvcihjb250ZXh0OiB3eC5DYW52YXNDb250ZXh0KSB7XHJcbiAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgaW5pdENpcmNsZUJhclZpZXcoKSB7XHJcbiAgICBsZXQgeUFyciA9IFsxMCwgMTUsIDIwLCAyNSwgMzAsIDM1LCA0MCwgNDUsIDUwLCA1NSwgNjAsIDY1LCA3MF07XHJcbiAgICBsZXQgeCA9IDEwMDtcclxuXHJcbiAgICBbMSwyMCwgNDAsIDYwXS5mb3JFYWNoKG51bSA9PntcclxuICAgICAgeUFyci5mb3JFYWNoKHZhbHVlID0+IHtcclxuICAgICAgICB0aGlzLmZpbGxDaXJjbGUoeyB4OiB4ICsgbnVtLCB5OiB2YWx1ZSB9LCB7IHJhZGl1czogMiwgY29sb3I6ICcjMEJEMkJDJyB9KTtcclxuICAgICAgICB0aGlzLmZpbGxDaXJjbGUoeyB4OiAoeCArIDUpICsgbnVtLCB5OiB2YWx1ZSB9LCB7IHJhZGl1czogMiwgY29sb3I6ICcjMEJEMkJDJyB9KTtcclxuICAgICAgfSlcclxuICAgIH0pXHJcbiAgICBcclxuICB9XHJcblxyXG5cclxuICBmaWxsUmVjdChwb3M6IG9iamVjdCwgb3B0OiBvYmplY3QpIHtcclxuICAgIGxldCBfZmlsbFN0eWxlID0gdGhpcy5jb250ZXh0LmZpbGxTdHlsZTtcclxuICAgIHRoaXMuY29udGV4dC5zZXRGaWxsU3R5bGUob3B0LmNvbG9yLCA1KTtcclxuICAgIHRoaXMuY29udGV4dC5maWxsUmVjdChwb3MueCwgcG9zLnksIG9wdC5oZWlnaHQsIG9wdC53aWR0aCk7XHJcbiAgICB0aGlzLmNvbnRleHQuZHJhdyh0cnVlKTtcclxuXHJcbiAgICB0aGlzLmNvbnRleHQuc2V0RmlsbFN0eWxlKF9maWxsU3R5bGUpO1xyXG5cclxuICB9XHJcblxyXG5cclxuICBmaWxsQ2lyY2xlKHBvczogb2JqZWN0LCBvcHQ6IG9iamVjdCkge1xyXG4gICAgbGV0IF9maWxsU3R5bGUgPSB0aGlzLmNvbnRleHQuZmlsbFN0eWxlO1xyXG4gICAgdGhpcy5jb250ZXh0LnNldEZpbGxTdHlsZShvcHQuY29sb3IpO1xyXG4gICAgdGhpcy5jb250ZXh0LmFyYyhwb3MueCwgcG9zLnksIG9wdC5yYWRpdXMsIDIgKiBNYXRoLlBJKTtcclxuICAgIHRoaXMuY29udGV4dC5maWxsKCk7XHJcblxyXG4gICAgdGhpcy5jb250ZXh0LnNldEZpbGxTdHlsZSh0aGlzLl9zaGFkZUNvbG9yMShvcHQuY29sb3IsIDIwKSk7XHJcbiAgICB0aGlzLmNvbnRleHQuYXJjKHBvcy54LCBwb3MueSwgb3B0LnJhZGl1cyAtIDIsIDIgKiBNYXRoLlBJKTtcclxuICAgIHRoaXMuY29udGV4dC5maWxsKCk7XHJcbiAgICBcclxuICAgIHRoaXMuY29udGV4dC5kcmF3KHRydWUpO1xyXG4gICAgdGhpcy5jb250ZXh0LnNldEZpbGxTdHlsZShfZmlsbFN0eWxlKTtcclxuXHJcbiAgfVxyXG5cclxuXHJcbiAgX3NoYWRlQ29sb3IxKGNvbG9yLCBwZXJjZW50KSB7ICAvLyBkZXByZWNhdGVkLiBTZWUgYmVsb3cuXHJcbiAgICB2YXIgbnVtID0gcGFyc2VJbnQoY29sb3Iuc2xpY2UoMSksIDE2KSwgYW10ID0gTWF0aC5yb3VuZCgyLjU1ICogcGVyY2VudCksIFIgPSAobnVtID4+IDE2KSArIGFtdCwgRyA9IChudW0gPj4gOCAmIDB4MDBGRikgKyBhbXQsIEIgPSAobnVtICYgMHgwMDAwRkYpICsgYW10O1xyXG4gICAgcmV0dXJuIFwiI1wiICsgKDB4MTAwMDAwMCArIChSIDwgMjU1ID8gUiA8IDEgPyAwIDogUiA6IDI1NSkgKiAweDEwMDAwICsgKEcgPCAyNTUgPyBHIDwgMSA/IDAgOiBHIDogMjU1KSAqIDB4MTAwICsgKEIgPCAyNTUgPyBCIDwgMSA/IDAgOiBCIDogMjU1KSkudG9TdHJpbmcoMTYpLnNsaWNlKDEpO1xyXG4gIH1cclxufVxyXG4iXX0=